/* jshint ignore:start */
if (typeof Object.getPrototypeOf !== "function")
Object.getPrototypeOf = ''.__proto__ === String.prototype
? function (object) {
    return object.__proto__;
}
: function (object) {
    // May break if the constructor has been tampered with
    return object.constructor.prototype;
}
if (!Object.create) {
    Object.create = (function(){
        function F(){}

        return function(o){
            if (arguments.length != 1) {
                throw new Error('Object.create implementation only accepts one parameter.');
            }
            F.prototype = o;
            return new F()
        }
    })()
}
/* jshint ignore:end */
;/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jerrymarker = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,13],$V2=[1,5],$V3=[1,6],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[5,29,52,54,55,61,63,65,66,67,69,71,73,74,75,77],$Va=[1,33],$Vb=[1,34],$Vc=[1,28],$Vd=[1,23],$Ve=[1,22],$Vf=[1,24],$Vg=[1,25],$Vh=[1,27],$Vi=[1,29],$Vj=[1,30],$Vk=[1,35],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,31,32,33,34,35,43,49,53,62,76,78],$VD=[1,73],$VE=[1,74],$VF=[8,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,43,49,53,62,70,72,76,78],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,43,49,53,62,76,78],$VN=[11,35],$VO=[35,43],$VP=[49,76,78],$VQ=[11,14,17,18,19,21,22,23,24,25,26,28,35,43,49,53,62,76,78],$VR=[11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,35,43,49,53,62,76,78],$VS=[11,17,18,21,22,23,24,25,26,28,35,43,49,53,62,76,78],$VT=[11,25,26,28,35,43,49,53,62,76,78],$VU=[1,158],$VV=[1,159];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"html":3,"contents":4,"EOF":5,"content":6,"OBJECT":7,"DOT":8,"IDENTIFIER":9,"[":10,"]":11,"STRING":12,"e":13,"+":14,"*":15,"%":16,"==":17,"!=":18,"-":19,"/":20,"<":21,">":22,">=":23,"<=":24,"||":25,"&&":26,"(":27,")":28,"INDENT":29,"!":30,"??":31,"?html":32,"?keys":33,"?string":34,",":35,"NUMBER":36,"TRUE":37,"FALSE":38,"SEQUENCE":39,"HASH":40,"SEQELEMENT":41,"OPENBRACE":42,"CLOSEBRACE":43,"PROPERTYLIST":44,"PROPERTY":45,":":46,"CUSTOMPROPERTYLIST":47,"CUSTOMPROPERTY":48,"SEP":49,"SETVALUE":50,"INTERPOLATIONS":51,"${":52,"}":53,"CHAR":54,"CHARS":55,"IFDIRECTIVE":56,"LISTDIRECTIVE":57,"ASSIGNDIRECTIVE":58,"MACRODIRECTIVE":59,"CUSTOM":60,"DIRECTIVE_IF_START_TAG":61,"DIRECTIVE_END":62,"DIRECTIVE_IF_END_TAG":63,"ELSEIF":64,"DIRECTIVE_ELSEIF_START_TAG":65,"DIRECTIVE_ELSE_START_TAG":66,"DIRECTIVE_LIST_START_TAG":67,"AS":68,"DIRECTIVE_LIST_END_TAG":69,"..":70,"DIRECTIVE_ASSIGN_START_TAG":71,"=":72,"DIRECTIVE_MACRO_START_TAG":73,"DIRECTIVE_MACRO_END_TAG":74,"CUSTOM_START":75,"CUSTOM_START_END":76,"CUSTOM_END":77,"CUSTOM_SELFCLOSING":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"DOT",9:"IDENTIFIER",10:"[",11:"]",12:"STRING",14:"+",15:"*",16:"%",17:"==",18:"!=",19:"-",20:"/",21:"<",22:">",23:">=",24:"<=",25:"||",26:"&&",27:"(",28:")",29:"INDENT",30:"!",31:"??",32:"?html",33:"?keys",34:"?string",35:",",36:"NUMBER",37:"TRUE",38:"FALSE",42:"OPENBRACE",43:"CLOSEBRACE",46:":",49:"SEP",50:"SETVALUE",52:"${",53:"}",54:"CHAR",55:"CHARS",61:"DIRECTIVE_IF_START_TAG",62:"DIRECTIVE_END",63:"DIRECTIVE_IF_END_TAG",65:"DIRECTIVE_ELSEIF_START_TAG",66:"DIRECTIVE_ELSE_START_TAG",67:"DIRECTIVE_LIST_START_TAG",68:"AS",69:"DIRECTIVE_LIST_END_TAG",70:"..",71:"DIRECTIVE_ASSIGN_START_TAG",72:"=",73:"DIRECTIVE_MACRO_START_TAG",74:"DIRECTIVE_MACRO_END_TAG",75:"CUSTOM_START",76:"CUSTOM_START_END",77:"CUSTOM_END",78:"CUSTOM_SELFCLOSING"},
productions_: [0,[3,2],[4,1],[4,2],[7,3],[7,1],[7,4],[7,4],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,3],[13,2],[13,2],[13,2],[13,2],[13,7],[13,3],[13,4],[13,3],[13,1],[13,2],[13,2],[13,3],[13,1],[13,2],[13,3],[13,2],[13,1],[13,1],[13,1],[13,2],[13,2],[13,3],[13,1],[13,2],[13,1],[13,2],[39,2],[39,3],[41,1],[41,3],[40,2],[40,3],[44,1],[44,3],[45,3],[45,3],[45,3],[47,1],[47,3],[48,3],[48,3],[48,3],[51,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[56,5],[56,5],[64,5],[64,4],[64,5],[64,5],[57,10],[57,11],[57,10],[57,12],[57,12],[57,12],[57,12],[58,6],[58,7],[59,6],[60,3],[60,5],[60,6],[60,4],[60,2],[60,3],[60,4],[60,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     var root = $$[$0-1];
     this.$ = root;
     return this.$;
   
break;
case 2:

        var n = new yy.ast.ContentNode();
        n.v.push($$[$0]);
        this.$ = n;
   
break;
case 3:

        var n = new yy.ast.ContentNode();
        n.v.push($$[$0]);

        $$[$0-1].v.push(n);
        this.$ = $$[$0-1];
   
break;
case 4:

        this.$ = new yy.ast.ObjectNode('.', $$[$0-2], $$[$0]);
    
break;
case 5: case 42: case 44:

        this.$ = new yy.ast.ObjectNode('value', $$[$0]);
    
break;
case 6:

        this.$ = new yy.ast.ObjectNode('[]', $$[$0-3], $$[$0-1], $$[$0-1]);
    
break;
case 7:

        this.$ = new yy.ast.ObjectNode('.', $$[$0-3], $$[$0-1].slice(1,-1));
    
break;
case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20:

        this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);
    
break;
case 21:

        this.$ = new yy.ast.ExpressionNode('eval', $$[$0-1]);
    
break;
case 22: case 23:

        this.$ = new yy.ast.ExpressionNode('uminus', $$[$0]);
    
break;
case 24: case 31:

        this.$ = new yy.ast.ExpressionNode('unot', $$[$0]);
    
break;
case 25:

        this.$ = new yy.ast.ExpressionNode('exist', $$[$0-1]);
    
break;
case 26:

        this.$ = new yy.ast.ExpressionNode('tohtml', $$[$0-1]);
    
break;
case 27:

        this.$ = new yy.ast.ExpressionNode('keys', $$[$0-1]);
    
break;
case 28:

        this.$ = new yy.ast.ExpressionNode('trueset', $$[$0-6], $$[$0-3], $$[$0-1]);
    
break;
case 29: case 30:

        this.$ = new yy.ast.ExpressionNode('existset', $$[$0-2], $$[$0]);
    
break;
case 32:

        this.$ = new yy.ast.ObjectNode('literalvalue', Number(yytext));
    
break;
case 33:

        this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0]));
    
break;
case 34: case 35:

        this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0-1]));
    
break;
case 36:

        //"hello"->hello
        this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0].slice(1,-1));
    
break;
case 37:

        this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0].slice(1,-1));
    
break;
case 38: case 39:

        this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0-1].slice(1,-1));
    
break;
case 40:

        this.$ = new yy.ast.ObjectNode('literalvalue', true);
    
break;
case 41:

        this.$ = new yy.ast.ObjectNode('literalvalue', false);
    
break;
case 43: case 45:

        this.$ = new yy.ast.ObjectNode('value', $$[$0-1]);
    
break;
case 47: case 56: case 61:

        this.$ = $$[$0];
    
break;
case 49:

        this.$ = $$[$0]
    
break;
case 50:

        this.$ = new yy.ast.ObjectNode('array', []);
    
break;
case 51:

        this.$ = new yy.ast.ObjectNode('array', $$[$0-1]);
    
break;
case 52:

        this.$ = [$$[$0]];
    
break;
case 53:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 54:

        this.$ = new yy.ast.ObjectNode('hash', {});
    
break;
case 55:

        this.$ = new yy.ast.ObjectNode('hash', $$[$0-1]);
    
break;
case 57: case 62:

        this.$ = yy.util.deepObjectExtend($$[$0-2], $$[$0]);
    
break;
case 58: case 60: case 63: case 65:

        var d = {};
        d[$$[$0-2]] = $$[$0];
        this.$ = d;
    
break;
case 59: case 64:

        var d = {};
        d[$$[$0-2].slice(1,-1)] = $$[$0];
        this.$ = d;
    
break;
case 66:

        this.$ = $$[$0-1];
    
break;
case 67:

        this.$ = new yy.ast.InterPolationNode($$[$0]);
    
break;
case 68: case 69: case 70:

        this.$ = new yy.ast.LiteralNode($$[$0]);
    
break;
case 76: case 81:

        var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], null);
        this.$ = nd;
    
break;
case 77: case 78:

        var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], $$[$0]);
        this.$ = nd;
    
break;
case 79: case 80:

        var trueCondition = new yy.ast.ObjectNode('literalvalue', true);
        var nd = new yy.ast.IFNode(trueCondition, $$[$0-1], null);
        this.$ = nd;
    
break;
case 82: case 84:

        this.$ = new yy.ast.ListNode($$[$0-7], $$[$0-3], $$[$0-1]);
    
break;
case 83:

        this.$ = new yy.ast.ListNode($$[$0-8], $$[$0-4], $$[$0-1]);
    
break;
case 85:

        this.$ = new yy.ast.ListNode([$$[$0-9], $$[$0-7]], $$[$0-3], $$[$0-1], true);
    
break;
case 86:

        var end = new yy.ast.ObjectNode('literalvalue', Number($$[$0-7]));
        this.$ = new yy.ast.ListNode([$$[$0-9], end], $$[$0-3], $$[$0-1], true);
    
break;
case 87:

        var start = new yy.ast.ObjectNode('literalvalue', Number($$[$0-9]));
        this.$ = new yy.ast.ListNode([start, $$[$0-7]], $$[$0-3], $$[$0-1], true);
    
break;
case 88:

        var start = new yy.ast.ObjectNode('literalvalue', Number($$[$0-9]));
        var end = new yy.ast.ObjectNode('literalvalue', Number($$[$0-7]));

        this.$ = new yy.ast.ListNode([start, end], $$[$0-3], $$[$0-1], true);
    
break;
case 89:

        var lv = new yy.ast.ObjectNode('value', $$[$0-3]);
        this.$ = new yy.ast.StatementNode('assign', lv, $$[$0-1]);
    
break;
case 90:

        var lv = new yy.ast.ObjectNode('value', $$[$0-4]);
        this.$ = new yy.ast.StatementNode('assign', lv, $$[$0-1]);
    
break;
case 91:

        this.$ = new yy.ast.MacroNode($$[$0-3], $$[$0-1]);
    
break;
case 92:

        this.$ = new yy.ast.CustomNode($$[$0-2], {});
    
break;
case 93: case 99:

        this.$ = new yy.ast.CustomNode($$[$0-4], new yy.ast.ObjectNode('hash', $$[$0-2]));
    
break;
case 94:

        this.$ = new yy.ast.CustomNode($$[$0-5], new yy.ast.ObjectNode('hash', $$[$0-3]));
    
break;
case 95:

        this.$ = new yy.ast.CustomNode($$[$0-3], new yy.ast.ObjectNode('hash', {}), $$[$0-1]);
    
break;
case 96:

        this.$ = new yy.ast.CustomNode($$[$0-1], new yy.ast.ObjectNode('hash', {}));
    
break;
case 97:

        this.$ = new yy.ast.CustomNode($$[$0-2], new yy.ast.ObjectNode('hash', {}));
    
break;
case 98:

        this.$ = new yy.ast.CustomNode($$[$0-3], new yy.ast.ObjectNode('hash', $$[$0-1]));
    
break;
}
},
table: [{3:1,4:2,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{1:[3]},{5:[1,19],6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},o($V9,[2,2]),o($V9,[2,67]),o($V9,[2,68]),o($V9,[2,69]),o($V9,[2,70]),o($V9,[2,71]),o($V9,[2,72]),o($V9,[2,73]),o($V9,[2,74]),o($V9,[2,75]),{7:26,9:$Va,10:$Vb,12:$Vc,13:21,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:36,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{29:[1,37]},{29:[1,38]},{29:[1,39]},{49:[1,41],76:[1,40],78:[1,42]},{1:[2,1]},o($V9,[2,3]),{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,53:[1,43]},{7:26,9:$Va,10:$Vb,12:$Vc,13:61,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:62,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:64,9:$Va,10:$Vb,12:[1,67],19:[1,63],30:[1,65],36:[1,66],39:68,40:69,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:70,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,42],{8:$VD,10:$VE,29:[1,72],30:[1,71]}),o($VC,[2,32],{29:[1,75]}),o($VC,[2,36],{29:[1,76]}),o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,46]),o($VC,[2,48]),o($VF,[2,5]),{7:26,9:$Va,10:$Vb,11:[1,77],12:$Vc,13:79,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,41:78,42:$Vk},{9:$VG,12:$VH,36:$VI,43:[1,80],44:81,45:82},{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,62:[1,86]},{7:87,9:$Va,10:$Vb,36:[1,89],39:88},{7:90,9:$Va},{9:[1,91]},{4:93,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8,77:[1,92]},{9:$VJ,12:$VK,36:$VL,47:94,48:96,78:[1,95]},o($V9,[2,96]),o($V9,[2,66]),{7:26,9:$Va,10:$Vb,12:$Vc,13:100,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:101,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:102,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:103,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:104,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:105,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:106,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:107,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:108,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:109,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:110,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:111,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:112,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,25]),o($VC,[2,26]),o($VC,[2,27]),{27:[1,113]},{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,28:[1,114],31:$Vy,32:$Vz,33:$VA,34:$VB},o($VC,[2,22]),{7:26,9:$Va,10:$Vb,12:$Vc,13:115,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,44],{8:$VD,10:$VE,29:[1,117],30:[1,116]}),{7:26,9:$Va,10:$Vb,12:$Vc,13:118,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,33],{29:[1,119]}),o($VC,[2,37],{29:[1,120]}),o($VC,[2,47]),o($VC,[2,49]),o($VC,[2,24]),{7:26,9:$Va,10:$Vb,12:$Vc,13:121,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,43]),{9:[1,122]},{7:123,9:$Va,12:[1,124]},o($VC,[2,34]),o($VC,[2,39]),o($VM,[2,50]),{11:[1,125],35:[1,126]},o($VN,[2,52],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VC,[2,54]),{35:[1,128],43:[1,127]},o($VO,[2,56]),{46:[1,129]},{46:[1,130]},{46:[1,131]},{4:132,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{8:$VD,10:$VE,29:[1,133],70:[1,134]},{29:[1,135]},{70:[1,136]},{8:$VD,10:$VE,29:[1,138],72:[1,137]},{62:[1,139]},o($V9,[2,92]),{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8,77:[1,140]},{49:[1,142],76:[1,141],78:[1,143]},o($V9,[2,97]),o($VP,[2,61]),{50:[1,144]},{50:[1,145]},{50:[1,146]},o($VQ,[2,8],{15:$Vm,16:$Vn,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VR,[2,9],{31:$Vy,32:$Vz,33:$VA,34:$VB}),o([11,14,16,17,18,19,21,22,23,24,25,26,28,35,43,49,53,62,76,78],[2,10],{15:$Vm,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VS,[2,11],{14:$Vl,15:$Vm,16:$Vn,19:$Vq,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VS,[2,12],{14:$Vl,15:$Vm,16:$Vn,19:$Vq,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VQ,[2,13],{15:$Vm,16:$Vn,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VR,[2,14],{31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VS,[2,15],{14:$Vl,15:$Vm,16:$Vn,19:$Vq,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VS,[2,16],{14:$Vl,15:$Vm,16:$Vn,19:$Vq,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VS,[2,17],{14:$Vl,15:$Vm,16:$Vn,19:$Vq,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VS,[2,18],{14:$Vl,15:$Vm,16:$Vn,19:$Vq,20:$Vr,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VT,[2,19],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VT,[2,20],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,31:$Vy,32:$Vz,33:$VA,34:$VB}),{7:26,9:$Va,10:$Vb,12:$Vc,13:147,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,21]),o($VC,[2,23]),{7:26,9:$Va,10:$Vb,12:$Vc,13:148,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,45]),o($VC,[2,31]),o($VC,[2,35]),o($VC,[2,38]),o($VC,[2,29]),o($VF,[2,4]),{8:$VD,10:$VE,11:[1,149]},{11:[1,150]},o($VM,[2,51]),{7:26,9:$Va,10:$Vb,12:$Vc,13:151,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},o($VC,[2,55]),{9:$VG,12:$VH,36:$VI,45:152},{7:26,9:$Va,10:$Vb,12:$Vc,13:153,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:154,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:155,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,63:[1,156],64:157,65:$VU,66:$VV,67:$V5,71:$V6,73:$V7,75:$V8},{68:[1,160]},{7:161,9:$Va,36:[1,162]},{68:[1,163]},{7:164,9:$Va,36:[1,165]},{7:26,9:$Va,10:$Vb,12:$Vc,13:166,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{72:[1,167]},{4:168,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},o($V9,[2,95]),{77:[1,169]},{9:$VJ,12:$VK,36:$VL,48:172,76:[1,170],78:[1,171]},o($V9,[2,98]),{7:26,9:$Va,10:$Vb,12:$Vc,13:173,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:174,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{7:26,9:$Va,10:$Vb,12:$Vc,13:175,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:[1,176]},o($VC,[2,30]),o($VF,[2,6]),o($VF,[2,7]),o($VN,[2,53],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VO,[2,57]),o($VO,[2,58],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VO,[2,59],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VO,[2,60],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($V9,[2,76]),o($V9,[2,77]),{7:26,9:$Va,10:$Vb,12:$Vc,13:177,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{29:[1,179],62:[1,178]},{29:[1,180]},{8:$VD,10:$VE,29:[1,181]},{29:[1,182]},{29:[1,183]},{8:$VD,10:$VE,29:[1,184]},{29:[1,185]},{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,62:[1,186]},{7:26,9:$Va,10:$Vb,12:$Vc,13:187,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,74:[1,188],75:$V8},o($V9,[2,93]),{77:[1,189]},o($V9,[2,99]),o($VP,[2,62]),o($VP,[2,63],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VP,[2,64],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),o($VP,[2,65],{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB}),{7:26,9:$Va,10:$Vb,12:$Vc,13:190,19:$Vd,27:$Ve,29:$Vf,30:$Vg,36:$Vh,37:$Vi,38:$Vj,39:31,40:32,42:$Vk},{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,62:[1,191]},{4:192,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{62:[1,193]},{7:194,9:$Va},{68:[1,195]},{68:[1,196]},{7:197,9:$Va},{68:[1,198]},{68:[1,199]},o($V9,[2,89]),{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,62:[1,200]},o($V9,[2,91]),o($V9,[2,94]),{14:$Vl,15:$Vm,16:$Vn,17:$Vo,18:$Vp,19:$Vq,20:$Vr,21:$Vs,22:$Vt,23:$Vu,24:$Vv,25:$Vw,26:$Vx,28:[1,201],31:$Vy,32:$Vz,33:$VA,34:$VB},{4:202,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,63:[1,203],67:$V5,71:$V6,73:$V7,75:$V8},{4:204,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{8:$VD,10:$VE,29:[1,206],62:[1,205]},{29:[1,207]},{29:[1,208]},{8:$VD,10:$VE,62:[1,209]},{29:[1,210]},{29:[1,211]},o($V9,[2,90]),o($VC,[2,28]),{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,63:[1,213],64:212,65:$VU,66:$VV,67:$V5,71:$V6,73:$V7,75:$V8},o($V9,[2,79]),{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,63:[1,214],67:$V5,71:$V6,73:$V7,75:$V8},{4:215,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{62:[1,216]},{7:217,9:$Va},{7:218,9:$Va},{4:219,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{7:220,9:$Va},{7:221,9:$Va},o($V9,[2,78]),o($V9,[2,81]),o($V9,[2,80]),{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,222],71:$V6,73:$V7,75:$V8},{4:223,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{8:$VD,10:$VE,62:[1,224]},{8:$VD,10:$VE,62:[1,225]},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,226],71:$V6,73:$V7,75:$V8},{8:$VD,10:$VE,62:[1,227]},{8:$VD,10:$VE,62:[1,228]},o($V9,[2,82]),{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,229],71:$V6,73:$V7,75:$V8},{4:230,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{4:231,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},o($V9,[2,84]),{4:232,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},{4:233,6:3,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,71:$V6,73:$V7,75:$V8},o($V9,[2,83]),{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,234],71:$V6,73:$V7,75:$V8},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,235],71:$V6,73:$V7,75:$V8},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,236],71:$V6,73:$V7,75:$V8},{6:20,29:$V0,51:4,52:$V1,54:$V2,55:$V3,56:8,57:9,58:10,59:11,60:12,61:$V4,67:$V5,69:[1,237],71:$V6,73:$V7,75:$V8},o($V9,[2,85]),o($V9,[2,86]),o($V9,[2,87]),o($V9,[2,88])],
defaultActions: {19:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                        this.begin('interpolation');
                                        return 52;
                                    
break;
case 1:
                                                                                    this.popState();
                                                                                    return 43;
                                                                                
break;
case 2:
                                        this.popState();
                                        return 53;
                                    
break;
case 3:return 68
break;
case 4:return 36
break;
case 5:return 12
break;
case 6:return 37
break;
case 7:return 38
break;
case 8:
                                                                                        return 9;
                                                                                      
break;
case 9:return 70
break;
case 10:return 15
break;
case 11:return 20
break;
case 12:return 16
break;
case 13:return 19
break;
case 14:return 14
break;
case 15:
                                                                                        this.begin('array');
                                                                                        return 10;
                                                                                      
break;
case 16:
                                                                                    this.popState();
                                                                                    return 11;
                                                                                
break;
case 17:
                                                                                    this.begin('hash');
                                                                                    return 42;
                                                                                
break;
case 18:
                                                                                    return 25;
                                                                                
break;
case 19:
                                                                                    return 26;
                                                                                
break;
case 20:return 24
break;
case 21:return 23
break;
case 22:return 21
break;
case 23:
                                                                                    this.begin('exp');
                                                                                    return 27;
                                                                                
break;
case 24:return 22
break;
case 25:return 35
break;
case 26:return 46
break;
case 27:return 50
break;
case 28:return 49
break;
case 29:
                                                                                    this.popState();
                                                                                    return 28;
                                                                                
break;
case 30:return 8
break;
case 31:return 17
break;
case 32:return 18
break;
case 33:return 72
break;
case 34:return 30
break;
case 35:return 31
break;
case 36:return 32
break;
case 37:return 34
break;
case 38:return 33
break;
case 39:
                                        this.begin('if_drt');
                                        return 61;
                                    
break;
case 40:
                                        return 63;
                                    
break;
case 41:
                                        this.begin('list_drt');
                                        return 67;
                                    
break;
case 42:
                                        return 69;
                                    
break;
case 43:
                                            this.popState();
                                            return 62;
                                        
break;
case 44:
                                        this.begin('if_drt');
                                        return 65;
                                    
break;
case 45:
                                        this.begin('if_drt');
                                        return 66;
                                    
break;
case 46:
                                        this.begin('assign_drt');
                                        return 71;
                                    
break;
case 47:
                                        this.begin('macro_drt');
                                        return 73;
                                    
break;
case 48:
                                        return 74;
                                    
break;
case 49:
                                        yy_.yytext = yy_.yytext.slice(2);
                                        this.yy.util._lexStack.push(yy_.yytext);
                                        this.begin('custom_drt_start');
                                        return 75;
                                    
break;
case 50:
                                        this.popState();
                                        this.begin('custom_drt_content');
                                        return 76;
                                    
break;
case 51:
                                        var top = this.yy.util._lexStack.slice(-1);
                                        if (top.length > 0) {
                                            var custom = yy_.yytext.slice(3,-1);
                                            if (top[0] === custom) {
                                                this.yy.util._lexStack.pop();
                                                this.popState();
                                                return 77;
                                            }
                                        }
                                        return 55;
                                        
break;
case 52:
                                        this.popState();
                                        return 78;
                                    
break;
case 53:return ''
break;
case 54:return ''
break;
case 55:return ''
break;
case 56:return 29
break;
case 57:return 54
break;
case 58:return 5
break;
}
},
rules: [/^(?:\$\{)/,/^(?:\})/,/^(?:\})/,/^(?:as\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^"\n]*["\n]|'[^'\n]*['\n])/,/^(?:[ \t\n]*true\b)/,/^(?:[ \t\n]*false\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/,/^(?:\.\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\[)/,/^(?:[ \t\n]*\])/,/^(?:\{)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:[ \t]*\()/,/^(?:>)/,/^(?:[ \t]*,)/,/^(?::)/,/^(?:=)/,/^(?:[ \t\n]+)/,/^(?:\)[ \t]*)/,/^(?:\.)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:[ \t]*!)/,/^(?:\?\?[ \t]*)/,/^(?:\?html[ \t]*)/,/^(?:\?string[ \t]*)/,/^(?:\?keys[ \t]*)/,/^(?:<#if\b)/,/^(?:<\/#if>)/,/^(?:<#list\b)/,/^(?:<\/#list>)/,/^(?:[ \t]*>)/,/^(?:<#elseif\b)/,/^(?:<#else\b)/,/^(?:<#assign\b)/,/^(?:<#macro\b)/,/^(?:<\/#macro>)/,/^(?:<@[a-zA-Z]*)/,/^(?:[ \t\n]*>)/,/^(?:<\/@[a-zA-Z]*>)/,/^(?:[ \t\n]*\/>)/,/^(?:[ \t]+)/,/^(?:[ \t]+)/,/^(?:[ \t]+)/,/^(?:[ \t\n]+)/,/^(?:(.|\n))/,/^(?:$)/],
conditions: {"if_drt":{"rules":[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,57,58],"inclusive":true},"list_drt":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,57,58],"inclusive":true},"assign_drt":{"rules":[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,57,58],"inclusive":true},"macro_drt":{"rules":[0,2,3,8,39,40,41,42,43,44,45,46,47,48,49,56,57,58],"inclusive":true},"interpolation":{"rules":[0,2,3,4,5,6,7,8,10,11,12,13,14,15,16,18,19,20,21,22,23,29,30,31,32,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,53,56,57,58],"inclusive":true},"exp":{"rules":[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,29,30,31,32,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,56,57,58],"inclusive":true},"logic_op":{"rules":[0,2,3,39,40,41,42,44,45,46,47,48,49,56,57,58],"inclusive":true},"array":{"rules":[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,29,30,31,32,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,55,56,57,58],"inclusive":true},"hash":{"rules":[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,29,30,31,32,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,54,56,57,58],"inclusive":true},"custom_drt_start":{"rules":[0,2,3,5,8,27,28,39,40,41,42,44,45,46,47,48,49,50,52,56,57,58],"inclusive":true},"custom_drt_content":{"rules":[0,2,3,39,40,41,42,44,45,46,47,48,49,51,56,57,58],"inclusive":true},"INITIAL":{"rules":[0,2,3,39,40,41,42,44,45,46,47,48,49,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

;/* jshint ignore:start */
(function() {
    var util = this.util = this.yy.util = {};

    util._lexStack = [];

    var nativeIsArray = Array.isArray;

    util.isArray = isArray = nativeIsArray || function(obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    };
    util.isObject = isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };

    util.existy = function existy(v) {
        return null != v;
    }

    util.htmlspecialchars = function htmlspecialchars(str) {
        return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    }
    util.htmlspecialchars_decode = function htmlspecialchars_decode(str) {
        return str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, '\'');
    }

    util.getKeys = function getKeys(obj) {
        var r = [];
        for (var k in obj) {
            if (!obj.hasOwnProperty(k)) {
                continue;
            }
            r.push(k);
        }
        return r;
    }

    util.deepObjectExtend = function deepObjectExtend(target, source) {
        for (var prop in source) {
            if (prop in target) {
                deepObjectExtend(target[prop], source[prop]);
            } else {
                target[prop] = source[prop];
            }
        }
        return target;
    }
    util.deepCopy = function deepCopy(src, /* INTERNAL */ _visited) {
        if(src == null || typeof(src) !== 'object'){
            return src;
        }

        if (_visited == undefined){
            _visited = [];
        } else {
            var i, len = _visited.length;
            for (i = 0; i < len; i++) {
                if (src === _visited[i]) {
                    return src;
                }
            }
        }
        _visited.push(src);

        if(typeof src.clone == 'function'){
            return src.clone(true);
        }

        if (Object.prototype.toString.call(src) == '[object Array]') {
            ret = src.slice();
            var i = ret.length;
            while (i--) {
                ret[i] = deepCopy(ret[i], _visited);
            }
            return ret;
        }
        if (src instanceof Date){
            return new Date(src.getTime());
        }
        if(src instanceof RegExp){
            return new RegExp(src);
        }
        if(src.nodeType && typeof src.cloneNode == 'function'){
            return src.cloneNode(true);
        }

        //make sure the returned object has the same prototype as the original
        var proto = (Object.getPrototypeOf ? Object.getPrototypeOf(src): src.__proto__);
        if (!proto) {
            proto = src.constructor.prototype; //this line would probably only be reached by very old browsers
        }
        var ret = Object.create(proto);

        for(var key in src){
            //Note: this does NOT preserve ES5 property attributes like 'writable', 'enumerable', etc.
            //For an example of how this could be modified to do so, see the singleMixin() function
            ret[key] = deepCopy(src[key], _visited);
        }
        return ret;
    }
}).call(jerrymarker);
/* jshint ignore:end */
;(function() {
    var util = this.util;

    this.compile = compile;

    function _build_local_env() {
        var localEnv = {
            buffer: [],
            context: {},
            func_table: {}
        };
        return localEnv;
    }

    function compile(input) {
        var root = this.parse(input);
        var _this = this;
        var i;
        var test;

        if (root) {
            var f = function(context) {
                f.set = function(data, key, callback) {
                    var i;
                    var result = [];
                    if (!f.watches) {
                        f.watches = [];
                    }

                    for (i = 0; i < f.watches.length; i++) {

                        if (f.watches[i].key === key) {
                            result.push({
                                data: f.watches[i].func.call(null, data)
                            });
                        }
                    }
                    callback.call(null, result);
                };
                var env = [{
                    func_table: {},
                        buffer: [],
                        context: context
                }];

                var envOp = function(op, param1, param2) {
                    var currEnv = env[env.length-1];
                    var action_table = {
                        watch: function(param1, param2) {
                            if (!f.watches) {
                                f.watches = [];
                            }
                            f.watches.push({
                                key: param1,
                            func: param2
                            });
                        },
                        bufferIn: function(param1) {
                            currEnv.buffer.push(param1);
                            return;
                        },
                        bufferOut: function() {
                            return currEnv.buffer.join('');
                        },
                        addFunc: function(param1, param2) {
                            currEnv.func_table[param1] = param2;
                            return;
                        },
                        getFunc: function(param1) {
                            for (i=env.length-1; i>=0; i--) {
                                test = env[i].func_table[param1];
                                if (util.existy(test)) {
                                    return test;
                                }
                            }
                        },
                        get: function() {
                            return currEnv;
                        },
                        push: function(param1) {
                            env.push(param1);
                        },
                        pop: function() {
                            return env.pop();
                        },
                        setKey: function(param1, param2) {
                            currEnv.context[param1] = param2;
                        },
                        getKey: function(param1) {
                            for (i=env.length-1; i>=0; i--) {
                                test = env[i].context[param1];
                                if (util.existy(test)) {
                                    return test;
                                }
                            }
                        },
                        getKeyThis: function(param1) {
                            for (i=env.length-1; i>=0; i--) {
                                test = env[i].context.this;
                                if (util.existy(test)) {
                                    return test[param1];
                                }
                            }
                        }
                    };
                    return action_table[op](param1, param2);
                };

                var result = traverse(root, envOp);
                _this.util._lexStack = [];

                return result;
            };
            f.ast = root;
            return f;
        }
        return null;
    }

    function traverse(node, envOp) {
        var env;
        var action_table;

        if (!node) {
            return;
        }
        env = envOp('get');

        action_table = {
            content: function(node, envOp) {
                for(var i = 0; i < node.v.length; ++i) {
                    traverse(node.v[i], envOp);
                }
            },
            literal: function(node, envOp) {
                envOp('bufferIn', node.v);
            },
            object: function(node, envOp) {
                envOp('bufferIn', traverseObject(node, null, envOp));
            },
            iterpolation: function(node, envOp) {
                traverse(node.v, envOp);
            },
            expression: function(node, envOp) {
                envOp('bufferIn', traverseExpression(node, null, envOp));
            },
            'if': traverseIf,
            list: traverseList,
            statement: traverseStatement,
            custom: traverseCustom,
            macro: traverseMacro
        };
        action_table[node.type](node, envOp);

        return envOp('bufferOut');
    }

    function traverseStatement(node, envOp) {
        var env = envOp('get');

        var context = env.context;

        switch(node.op) {
            case 'assign':
                var v;
                switch(node.rv.type) {
                    case 'expression':
                        v = traverseExpression(node.rv, null, envOp);
                        break;
                    case 'object':
                        v = traverseObject(node.rv, null, envOp);
                        break;
                }
                traverseAssign(node.lv, null, v, envOp);
        }
    }

    function traverseAssign(l, r, newVal, envOp) {
        var q = [];

        _traverseAssign(l, r, newVal, q, envOp);

        _deep_assign(q, newVal, envOp);
    }
    function _deep_assign(keys, val, envOp) {
        var env = envOp('get');
        var context = env.context;

        if (keys.length > 1) {
            var k = keys.shift();

            if (context) {
                context[k] = val;
            }
            if(context[k] === null || typeof context[k] !== 'object') {
                context[k] = {};
            }
            _deep_assign(context[k], keys, val);
        } else {
            context[keys[0]] = val;
        }
    }

    function _traverseAssign(l, r, newVal, q, envOp) {
        var v;
        if (l.op) {
            switch (l.op) {
                case '.':
                    _traverseAssign(l.v1, l.v2, newVal, q, envOp);
                    q.push(l.v2);
                    return;
                case 'value':
                    _traverseAssign(l.v1, l.v2, newVal, q, envOp);
                    if (l.v2) {
                        q.push(l.v2);
                    }
                    return;
            }
        } else {
            q.push(l);
        }
    }

    function traverseObject(l, r, envOp) {
        var v, v1, v2;
        var i = 0;
        var temp;

        var action_table = {
            object: traverseObject,
            expression: traverseExpression
        };
        switch (l.op) {
            case '.':
                v = traverseObject(l.v1, l.v2, envOp);
                if (v) {
                    return v[l.v2];
                }
                return undefined;
            case 'value':
                v = traverseObject(l.v1, l.v2, envOp);
                return v;
            case 'literalvalue':
                return l.v1;
            case 'array':
                temp = [];
                for (i = 0; i < l.v1.length; ++i) {
                    temp.push(action_table[l.v1[i].type](l.v1[i], null, envOp));
                }
                return temp;
            case 'hash':
                temp = {};
                for (var prop in l.v1) {
                    if (l.v1.hasOwnProperty(prop)) {
                        temp[prop] = action_table[l.v1[prop].type](l.v1[prop], null, envOp);
                    }
                }
                return temp;
            case '[]':
                v1 = traverseObject(l.v1, null, envOp);
                v2 = traverseObject(l.v2, null, envOp);

                if (v2 && v1[v2]) {
                    return v1[v2];
                } else {
                    if (l.spare) {
                        l.spare.op = 'literalvalue';
                    }
                    v2 = traverseObject(l.spare, null, envOp);
                    return v1[v2];
                }
                return;
            default:
                return envOp('getKey', l);
        }
    }

    function traverseExpression(l, r, envOp) {
        var v1 = null;
        var v2 = null;
        var temp = null;
        var i = 0;
        switch(l.type) {
            case 'expression':
                switch(l.op) {
                    case '*':
                        return traverseExpression(l.v1, null, envOp) * traverseExpression(l.v2, null, envOp);
                    case '+':
                        v1 = traverseExpression(l.v1, null, envOp);
                        v2 = traverseExpression(l.v2, null, envOp);

                        if (isArray(v1)) {
                            i = 0;
                            temp = [];

                            for (i = 0; i < v1.length; i++) {
                                temp.push(util.deepCopy(v1[i]));
                            }

                            if (isArray(v2)) {
                                for (i = 0; i < v2.length; i++) {
                                    temp.push(util.deepCopy(v2[i]));
                                }
                            } else {
                                temp.push(util.deepCopy(v2));
                            }
                            return temp;
                        }
                        return v1 + v2;
                    case '%':
                        return traverseExpression(l.v1, null, envOp) % traverseExpression(l.v2, null, envOp);
                    case '==':
                        return (traverseExpression(l.v1, null, envOp) == traverseExpression(l.v2, null, envOp));
                    case '!=':
                        return (traverseExpression(l.v1, null, envOp) != traverseExpression(l.v2, null, envOp));
                    case '-':
                        return (traverseExpression(l.v1, null, envOp) - traverseExpression(l.v2, null, envOp));
                    case '/':
                        return (traverseExpression(l.v1, null, envOp) / traverseExpression(l.v2, null, envOp));
                    case 'eval':
                        return (traverseExpression(l.v1, null, envOp));
                    case 'uminus':
                        return -(traverseExpression(l.v1, null, envOp));
                    case 'unot':
                        return !(traverseExpression(l.v1, null, envOp));
                    case 'exist':
                        return util.existy(traverseExpression(l.v1, null, envOp));
                    case 'existset':
                        temp = traverseExpression(l.v1, null, envOp);
                        if (!util.existy(temp)) {
                            var spare = traverseExpression(l.v2, null, envOp);
                            return spare;
                        }
                        return;
                    case 'trueset':
                        return traverseExpression(l.v1, null, envOp) ? traverseExpression(l.v2, null, envOp) : traverseExpression(l.v3, null, envOp);
                    case 'tohtml':
                        return util.htmlspecialchars((traverseExpression(l.v1, null, envOp)));
                    case 'keys':
                        return util.getKeys(traverseExpression(l.v1, null, envOp));
                    case '||' :
                        return traverseExpression(l.v1, null, envOp) || traverseExpression(l.v2, null, envOp);
                    case '&&' :
                        return traverseExpression(l.v1, null, envOp) && traverseExpression(l.v2, null, envOp);
                    case '>' :
                        return traverseExpression(l.v1, null, envOp) > traverseExpression(l.v2, null, envOp);
                    case '<' :
                        return traverseExpression(l.v1, null, envOp) < traverseExpression(l.v2, null, envOp);
                    case '>=' :
                        return traverseExpression(l.v1, null, envOp) >= traverseExpression(l.v2, null, envOp);
                    case '<=' :
                        return traverseExpression(l.v1, null, envOp) <= traverseExpression(l.v2, null, envOp);
                }
                break;
            case 'object':
                return traverseObject(l, null, envOp);
        }
    }

    function traverseIf(root, envOp) {
        if (root.cond) {
            if (true === traverseExpression(root.cond, null, envOp)) {
                traverse(root.statement, envOp);
            } else {
                var curr = root;

                while (curr) {
                    var v = traverseExpression(curr.cond, null, envOp);
                    if (v) {
                        traverse(curr.statement, envOp);
                        break;
                    }
                    curr = curr.child;
                }
                return;
            }
        }
    }

    function traverseMacro(node, envOp) {
        envOp('addFunc', node.name, function(param) {
            return node;
        });
    }

    function traverseCustom(node, envOp) {
        var func = envOp('getFunc', node.key);
        var localEnv;
        var content;
        var result;
        var macroNode;
        var env;
        var context;
        var props;
        var propsParent;

        props = traverseObject(node.prop, null, envOp);

        propsParent = envOp('getKeyThis', 'props');

        if (!props) {
            props = {};
        }
        if (!propsParent) {
            propsParent = {};
        }

        if (func) {
            localEnv = _build_local_env();

            envOp('push', localEnv);

            envOp('setKey', 'this', {
                props : util.deepObjectExtend(props, propsParent)
            });

            if (props && props.watch) {

                envOp('watch', props.watch, function(newData) {
                    var result;

                    localEnv = _build_local_env();

                    envOp('push', localEnv);
                    envOp('setKey', 'this', {
                        props:newData
                    });

                    result = traverse(macroNode.content, envOp);

                    envOp('pop', localEnv);

                    return result;
                });
            }

            env = envOp('get');

            traverse(node.content, envOp);

            content = envOp('bufferOut');

            macroNode = func.call(this, content);

            result = traverse(macroNode.content, envOp);

            envOp('pop', localEnv);

            envOp('bufferIn', result);
        }
    }

    function traverseList(node, envOp) {
        var i;
        var collection = [];
        var localEnv;
        var content;

        if (node.isRange) {
            if (node.collection && 2 === node.collection.length) {
                var start = parseInt(traverseObject(node.collection[0], null, envOp), 10);
                var end = parseInt(traverseObject(node.collection[1], null, envOp), 10);
                var step = 1;

                while (start < end) {
                    collection.push(start);
                    start += step;
                }
            }
        }
        else {
            if (node.collection) {
                collection = traverseObject(node.collection, null, envOp);
            }
        }

        localEnv = _build_local_env(envOp);
        envOp('push', localEnv);

        if (collection) {
            for (i = 0; i < collection.length; ++i) {
                traverseAssign(node.alias, null, collection[i], envOp);
                traverse(node.statement, envOp);
            }
        }
        content = envOp('bufferOut');
        envOp('pop');

        envOp('bufferIn', content);
    }
}).call(jerrymarker);
;(function () {
    var ast = this.yy.ast = {};

    function Node(type) {
        this.type = type;
    }
    ast.ExpressionNode = function ExpressionNode(op, v1, v2, v3) {
        Node.call(this, 'expression');
        this.op = op;
        this.v1 = v1;
        this.v2 = v2;

        this.v3 = v3;
    };
    ast.ObjectNode = function ObjectNode(op, v1, v2, spare) {
        Node.call(this, 'object');
        this.v1 = v1;
        this.v2 = v2;
        this.op = op;

        //extra param
        this.spare = spare;
    };
    ast.IDNode = function IDNode(name) {
        Node.call(this, 'ID');
        this.name = name;
    };
    ast.ContentNode = function ContentNode() {
        Node.call(this, 'content');
        this.v = [];
    };
    ast.LiteralNode = function LiteralNode(v) {
        Node.call(this, 'literal');
        this.v = v;
    };
    ast.InterPolationNode = function InterPolationNode(v) {
        Node.call(this, 'iterpolation');
        this.v = v;
    };
    ast.IFNode = function IFNode(cond, statement, child) {
        Node.call(this, 'if');
        this.cond = cond;
        this.statement = statement;
        this.child = child;
    };
    ast.ListNode = function ListNode(collection, alias, statement, isRange) {
        Node.call(this, 'list');

        this.collection = collection;
        this.alias = alias;
        this.isRange = isRange || false;
        this.statement = statement;
    };
    ast.StatementNode = function StatementNode(op, lv, rv) {
        Node.call(this, 'statement');
        this.op = op;
        this.lv = lv;
        this.rv = rv;
    };
    ast.CustomNode = function CustomNode(key, prop, content) {
        Node.call(this, 'custom');
        this.key = key;
        this.content = content;
        this.prop = prop;
    };
    ast.MacroNode = function MacroNode(name, content) {
        Node.call(this, 'macro');
        this.name = name;
        this.content = content;
    };
}).call(jerrymarker);
;if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.compile = jerrymarker.compile.bind(jerrymarker);
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: '+args[0]+' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        var template = exports.compile(source);
        var context = {};
        console.log(template(context));
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}

