/* jshint ignore:start */
/* parser generated by jison 0.4.13 */
/*
   Returns a Parser object of the following structure:

   Parser: {
   yy: {}
   }

   Parser.prototype: {
   yy: {},
   trace: function(),
   symbols_: {associative list: name ==> number},
   terminals_: {associative list: number ==> name},
   productions_: [...],
   performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
   table: [...],
   defaultActions: {...},
   parseError: function(str, hash),
   parse: function(input),

   lexer: {
   EOF: 1,
   parseError: function(str, hash),
   setInput: function(input),
   input: function(),
   unput: function(str),
   more: function(),
   less: function(n),
   pastInput: function(),
   upcomingInput: function(),
   showPosition: function(),
   test_match: function(regex_match_array, rule_index),
   next: function(),
   lex: function(),
   begin: function(condition),
   popState: function(),
   _currentRules: function(),
   topState: function(),
   pushState: function(condition),

   options: {
   ranges: boolean           (optional: true ==> token location info will include a .range[] member)
   flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
   backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
   },

   performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
   rules: [...],
   conditions: {associative list: name ==> set},
   }
   }


   token location info (@$, _$, etc.): {
   first_line: n,
   last_line: n,
   first_column: n,
   last_column: n,
   range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
   }


   the parseError function receives a 'hash' object with these members for lexer and parser errors: {
   text:        (matched text)
   token:       (the produced terminal token, if any)
   line:        (yylineno)
   }
   while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
   loc:         (yylloc)
   expected:    (string describing the set of expected tokens)
   recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
   }
*/
var jerrymarker = (function(){
    var parser = {trace: function trace() { },
        yy: {},
    symbols_: {"error":2,"html":3,"contents":4,"EOF":5,"content":6,"OBJECT":7,"DOT":8,"IDENTIFIER":9,"e":10,"+":11,"*":12,"==":13,"-":14,"/":15,"(":16,")":17,"NUMBER":18,"INDENT":19,"STRING":20,"INTERPOLATIONS":21,"${":22,"}":23,"CHAR":24,"IFDIRECTIVE":25,"LISTDIRECTIVE":26,"ASSIGNDIRECTIVE":27,"DIRECTIVE_IF_START_TAG":28,">":29,"DIRECTIVE_IF_END_TAG":30,"ELSEIF":31,"DIRECTIVE_ELSEIF_START_TAG":32,"DIRECTIVE_ELSE_START_TAG":33,"DIRECTIVE_LIST_START_TAG":34,"AS":35,"DIRECTIVE_LIST_END_TAG":36,"DIRECTIVE_ASSIGN_START_TAG":37,"=":38,"$accept":0,"$end":1},
    terminals_: {2:"error",5:"EOF",8:"DOT",9:"IDENTIFIER",11:"+",12:"*",13:"==",14:"-",15:"/",16:"(",17:")",18:"NUMBER",19:"INDENT",20:"STRING",22:"${",23:"}",24:"CHAR",28:"DIRECTIVE_IF_START_TAG",29:">",30:"DIRECTIVE_IF_END_TAG",32:"DIRECTIVE_ELSEIF_START_TAG",33:"DIRECTIVE_ELSE_START_TAG",34:"DIRECTIVE_LIST_START_TAG",35:"AS",36:"DIRECTIVE_LIST_END_TAG",37:"DIRECTIVE_ASSIGN_START_TAG",38:"="},
    productions_: [0,[3,2],[4,1],[4,2],[7,3],[7,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,2],[10,2],[10,3],[10,1],[10,2],[10,3],[10,2],[10,1],[10,2],[10,2],[10,3],[10,1],[10,2],[10,2],[10,3],[10,2],[10,2],[10,3],[10,2],[10,2],[10,3],[10,2],[10,2],[10,3],[10,2],[10,2],[10,3],[10,2],[10,2],[10,3],[21,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[25,5],[25,5],[31,5],[31,4],[31,5],[31,5],[26,10],[26,11],[27,6],[27,6]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
        /* this == yyval */

        var $0 = $$.length - 1;
        switch (yystate) {
            case 1:
                var root = $$[$0-1];
                this.$ = root;
                return this.$;

                break;
            case 2:
                var n = new yy.ast.ContentNode();
                n.v.push($$[$0]);
                this.$ = n;

                break;
            case 3:
                var n = new yy.ast.ContentNode();
                n.v.push($$[$0]);

                $$[$0-1].v.push(n);
                this.$ = $$[$0-1];

                break;
            case 4:
                this.$ = new yy.ast.ObjectNode('.', $$[$0-2], $$[$0]);

                break;
            case 5:
                this.$ = new yy.ast.ObjectNode('.', $$[$0-2], $$[$0]);

                break;
            case 6:
                this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);

                break;
            case 7:
                this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);

                break;
            case 8:
                this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);

                break;
            case 9:
                this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);

                break;
            case 10:
                this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);

                break;
            case 11:
                this.$ = new yy.ast.ExpressionNode('eval', $$[$0-1]);

                break;
            case 12:
                this.$ = new yy.ast.ObjectNode('literalvalue', Number(yytext));

                break;
            case 13:
                this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0]));

                break;
            case 14:
                this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0-1]));

                break;
            case 15:
                this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0-1]));

                break;
            case 16:
                //"hello"->hello
                this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0].slice(1,-1));

                break;
            case 17:
                this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0].slice(1,-1));

                break;
            case 18:
                this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0-1].slice(1,-1));

                break;
            case 19:
                this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0-1].slice(1,-1));

                break;
            case 20:
                this.$ = new yy.ast.ObjectNode('value', $$[$0]);

                break;
            case 21:
                this.$ = new yy.ast.ObjectNode('value', $$[$0]);

                break;
            case 22:
                this.$ = new yy.ast.ObjectNode('value', $$[$0-1]);

                break;
            case 23:
                this.$ = new yy.ast.ObjectNode('value', $$[$0-1]);

                break;
            case 24:
                this.$ = new yy.ast.ObjectNode('value', $$[$0]);

                break;
            case 25:
                this.$ = new yy.ast.ObjectNode('value', $$[$0-1]);

                break;
            case 26:
                this.$ = new yy.ast.ObjectNode('value', $$[$0]);

                break;
            case 27:
                this.$ = new yy.ast.ObjectNode('value', $$[$0-1]);

                break;
            case 28:
                this.$ = $$[$0];

                break;
            case 29:
                this.$ = $$[$0-1];

                break;
            case 30:
                this.$ = $$[$0-1];

                break;
            case 31:
                this.$ = $$[$0];

                break;
            case 32:
                this.$ = $$[$0-1];

                break;
            case 33:
                this.$ = $$[$0-1];

                break;
            case 34:
                this.$ = $$[$0];

                break;
            case 35:
                this.$ = $$[$0-1];

                break;
            case 36:
                this.$ = $$[$0-1];

                break;
            case 37:
                this.$ = $$[$0];

                break;
            case 38:
                this.$ = $$[$0-1];

                break;
            case 39:
                this.$ = $$[$0-1];

                break;
            case 40:
                this.$ = $$[$0];

                break;
            case 41:
                this.$ = $$[$0-1];

                break;
            case 42:
                this.$ = $$[$0-1];

                break;
            case 43:
                this.$ = $$[$0-1];

                break;
            case 44:
                this.$ = new yy.ast.InterPolationNode($$[$0]);

                break;
            case 45:
                this.$ = new yy.ast.LiteralNode($$[$0]);

                break;
            case 46:
                this.$ = new yy.ast.LiteralNode($$[$0]);

                break;
            case 50:
                var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], null);
                this.$ = nd;

                break;
            case 51:
                var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], $$[$0]);
                this.$ = nd;

                break;
            case 52:
                var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], $$[$0]);
                this.$ = nd;

                break;
            case 53:
                var nd = new yy.ast.IFNode(true, $$[$0-1], null);
                this.$ = nd;

                break;
            case 54:
                var nd = new yy.ast.IFNode(true, $$[$0-1], null);
                this.$ = nd;

                break;
            case 55:
                var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], null);
                this.$ = nd;

                break;
            case 56:
                this.$ = new yy.ast.ListNode($$[$0-7], $$[$0-3], $$[$0-1]);

                break;
            case 57:
                this.$ = new yy.ast.ListNode($$[$0-8], $$[$0-4], $$[$0-1]);

                break;
            case 58:
                var lv = new yy.ast.ObjectNode('value', $$[$0-3]);
                this.$ = new yy.ast.StatementNode('assign', lv, $$[$0-1]);

                break;
            case 59:
                var lv = new yy.ast.ObjectNode('value', $$[$0-3]);
                this.$ = new yy.ast.StatementNode('assign', lv, $$[$0-1]);

                break;
        }
    },
    table: [{3:1,4:2,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{1:[3]},{5:[1,14],6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{5:[2,2],19:[2,2],22:[2,2],24:[2,2],28:[2,2],30:[2,2],32:[2,2],33:[2,2],34:[2,2],36:[2,2],37:[2,2]},{5:[2,44],19:[2,44],22:[2,44],24:[2,44],28:[2,44],30:[2,44],32:[2,44],33:[2,44],34:[2,44],36:[2,44],37:[2,44]},{5:[2,45],19:[2,45],22:[2,45],24:[2,45],28:[2,45],30:[2,45],32:[2,45],33:[2,45],34:[2,45],36:[2,45],37:[2,45]},{5:[2,46],19:[2,46],22:[2,46],24:[2,46],28:[2,46],30:[2,46],32:[2,46],33:[2,46],34:[2,46],36:[2,46],37:[2,46]},{5:[2,47],19:[2,47],22:[2,47],24:[2,47],28:[2,47],30:[2,47],32:[2,47],33:[2,47],34:[2,47],36:[2,47],37:[2,47]},{5:[2,48],19:[2,48],22:[2,48],24:[2,48],28:[2,48],30:[2,48],32:[2,48],33:[2,48],34:[2,48],36:[2,48],37:[2,48]},{5:[2,49],19:[2,49],22:[2,49],24:[2,49],28:[2,49],30:[2,49],32:[2,49],33:[2,49],34:[2,49],36:[2,49],37:[2,49]},{7:22,9:[1,21],10:16,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{7:22,9:[1,21],10:28,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{19:[1,29]},{19:[1,30]},{1:[2,1]},{5:[2,3],19:[2,3],22:[2,3],24:[2,3],28:[2,3],30:[2,3],32:[2,3],33:[2,3],34:[2,3],36:[2,3],37:[2,3]},{11:[1,32],12:[1,33],13:[1,34],14:[1,35],15:[1,36],23:[1,31]},{7:22,9:[1,21],10:37,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],17:[2,12],19:[1,38],23:[2,12],29:[2,12]},{7:42,9:[1,41],11:[1,43],12:[1,44],13:[1,47],14:[1,45],15:[1,46],18:[1,39],20:[1,40]},{11:[2,16],12:[2,16],13:[2,16],14:[2,16],15:[2,16],17:[2,16],19:[1,48],23:[2,16],29:[2,16]},{8:[1,50],11:[2,20],12:[2,20],13:[2,20],14:[2,20],15:[2,20],17:[2,20],19:[1,49],23:[2,20],29:[2,20]},{8:[1,52],11:[2,24],12:[2,24],13:[2,24],14:[2,24],15:[2,24],17:[2,24],19:[1,51],23:[2,24],29:[2,24]},{19:[1,53]},{19:[1,54]},{19:[1,55]},{19:[1,56]},{19:[1,57]},{11:[1,32],12:[1,33],13:[1,34],14:[1,35],15:[1,36],29:[1,58]},{9:[1,59]},{7:60,9:[1,61]},{5:[2,43],19:[2,43],22:[2,43],24:[2,43],28:[2,43],30:[2,43],32:[2,43],33:[2,43],34:[2,43],36:[2,43],37:[2,43]},{7:22,9:[1,21],10:62,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{7:22,9:[1,21],10:63,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{7:22,9:[1,21],10:64,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{7:22,9:[1,21],10:65,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{7:22,9:[1,21],10:66,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{11:[1,32],12:[1,33],13:[1,34],14:[1,35],15:[1,36],17:[1,67]},{11:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],17:[2,14],23:[2,14],29:[2,14]},{11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],17:[2,13],19:[1,68],23:[2,13],29:[2,13]},{11:[2,17],12:[2,17],13:[2,17],14:[2,17],15:[2,17],17:[2,17],19:[1,69],23:[2,17],29:[2,17]},{8:[1,50],11:[2,21],12:[2,21],13:[2,21],14:[2,21],15:[2,21],17:[2,21],19:[1,70],23:[2,21],29:[2,21]},{8:[1,52],11:[2,26],12:[2,26],13:[2,26],14:[2,26],15:[2,26],17:[2,26],19:[1,71],23:[2,26],29:[2,26]},{11:[2,28],12:[2,28],13:[2,28],14:[2,28],15:[2,28],17:[2,28],19:[1,72],23:[2,28],29:[2,28]},{11:[2,31],12:[2,31],13:[2,31],14:[2,31],15:[2,31],17:[2,31],19:[1,73],23:[2,31],29:[2,31]},{11:[2,34],12:[2,34],13:[2,34],14:[2,34],15:[2,34],17:[2,34],19:[1,74],23:[2,34],29:[2,34]},{11:[2,37],12:[2,37],13:[2,37],14:[2,37],15:[2,37],17:[2,37],19:[1,75],23:[2,37],29:[2,37]},{11:[2,40],12:[2,40],13:[2,40],14:[2,40],15:[2,40],17:[2,40],19:[1,76],23:[2,40],29:[2,40]},{11:[2,19],12:[2,19],13:[2,19],14:[2,19],15:[2,19],17:[2,19],23:[2,19],29:[2,19]},{11:[2,22],12:[2,22],13:[2,22],14:[2,22],15:[2,22],17:[2,22],23:[2,22],29:[2,22]},{9:[1,77]},{11:[2,25],12:[2,25],13:[2,25],14:[2,25],15:[2,25],17:[2,25],23:[2,25],29:[2,25]},{9:[1,78]},{11:[2,29],12:[2,29],13:[2,29],14:[2,29],15:[2,29],17:[2,29],23:[2,29],29:[2,29]},{11:[2,32],12:[2,32],13:[2,32],14:[2,32],15:[2,32],17:[2,32],23:[2,32],29:[2,32]},{11:[2,35],12:[2,35],13:[2,35],14:[2,35],15:[2,35],17:[2,35],23:[2,35],29:[2,35]},{11:[2,38],12:[2,38],13:[2,38],14:[2,38],15:[2,38],17:[2,38],23:[2,38],29:[2,38]},{11:[2,41],12:[2,41],13:[2,41],14:[2,41],15:[2,41],17:[2,41],23:[2,41],29:[2,41]},{4:79,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{19:[1,80]},{8:[1,52],38:[1,81]},{8:[1,50],38:[1,82]},{11:[2,6],12:[1,33],13:[1,34],14:[2,6],15:[1,36],17:[2,6],23:[2,6],29:[2,6]},{11:[2,7],12:[2,7],13:[1,34],14:[2,7],15:[2,7],17:[2,7],23:[2,7],29:[2,7]},{11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],17:[2,8],23:[2,8],29:[2,8]},{11:[2,9],12:[1,33],13:[1,34],14:[2,9],15:[1,36],17:[2,9],23:[2,9],29:[2,9]},{11:[2,10],12:[2,10],13:[1,34],14:[2,10],15:[2,10],17:[2,10],23:[2,10],29:[2,10]},{11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],17:[2,11],23:[2,11],29:[2,11]},{11:[2,15],12:[2,15],13:[2,15],14:[2,15],15:[2,15],17:[2,15],23:[2,15],29:[2,15]},{11:[2,18],12:[2,18],13:[2,18],14:[2,18],15:[2,18],17:[2,18],23:[2,18],29:[2,18]},{11:[2,23],12:[2,23],13:[2,23],14:[2,23],15:[2,23],17:[2,23],23:[2,23],29:[2,23]},{11:[2,27],12:[2,27],13:[2,27],14:[2,27],15:[2,27],17:[2,27],23:[2,27],29:[2,27]},{11:[2,30],12:[2,30],13:[2,30],14:[2,30],15:[2,30],17:[2,30],23:[2,30],29:[2,30]},{11:[2,33],12:[2,33],13:[2,33],14:[2,33],15:[2,33],17:[2,33],23:[2,33],29:[2,33]},{11:[2,36],12:[2,36],13:[2,36],14:[2,36],15:[2,36],17:[2,36],23:[2,36],29:[2,36]},{11:[2,39],12:[2,39],13:[2,39],14:[2,39],15:[2,39],17:[2,39],23:[2,39],29:[2,39]},{11:[2,42],12:[2,42],13:[2,42],14:[2,42],15:[2,42],17:[2,42],23:[2,42],29:[2,42]},{8:[2,5],11:[2,5],12:[2,5],13:[2,5],14:[2,5],15:[2,5],17:[2,5],19:[2,5],23:[2,5],29:[2,5],38:[2,5]},{8:[2,4],11:[2,4],12:[2,4],13:[2,4],14:[2,4],15:[2,4],17:[2,4],19:[2,4],23:[2,4],29:[2,4],38:[2,4]},{6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],30:[1,83],31:84,32:[1,85],33:[1,86],34:[1,12],37:[1,13]},{35:[1,87]},{7:22,9:[1,21],10:88,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{7:22,9:[1,21],10:89,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{5:[2,50],19:[2,50],22:[2,50],24:[2,50],28:[2,50],30:[2,50],32:[2,50],33:[2,50],34:[2,50],36:[2,50],37:[2,50]},{5:[2,51],19:[2,51],22:[2,51],24:[2,51],28:[2,51],30:[2,51],32:[2,51],33:[2,51],34:[2,51],36:[2,51],37:[2,51]},{7:22,9:[1,21],10:90,11:[1,23],12:[1,24],13:[1,27],14:[1,25],15:[1,26],16:[1,17],18:[1,18],19:[1,19],20:[1,20]},{19:[1,92],29:[1,91]},{19:[1,93]},{11:[1,32],12:[1,33],13:[1,34],14:[1,35],15:[1,36],29:[1,94]},{11:[1,32],12:[1,33],13:[1,34],14:[1,35],15:[1,36],29:[1,95]},{11:[1,32],12:[1,33],13:[1,34],14:[1,35],15:[1,36],29:[1,96]},{4:97,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{29:[1,98]},{9:[1,99]},{5:[2,58],19:[2,58],22:[2,58],24:[2,58],28:[2,58],30:[2,58],32:[2,58],33:[2,58],34:[2,58],36:[2,58],37:[2,58]},{5:[2,59],19:[2,59],22:[2,59],24:[2,59],28:[2,59],30:[2,59],32:[2,59],33:[2,59],34:[2,59],36:[2,59],37:[2,59]},{4:100,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],30:[1,101],34:[1,12],37:[1,13]},{4:102,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{19:[1,104],29:[1,103]},{6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],30:[1,106],31:105,32:[1,85],33:[1,86],34:[1,12],37:[1,13]},{5:[2,53],19:[2,53],22:[2,53],24:[2,53],28:[2,53],30:[2,53],32:[2,53],33:[2,53],34:[2,53],36:[2,53],37:[2,53]},{6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],30:[1,107],34:[1,12],37:[1,13]},{4:108,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{29:[1,109]},{5:[2,52],19:[2,52],22:[2,52],24:[2,52],28:[2,52],30:[2,52],32:[2,52],33:[2,52],34:[2,52],36:[2,52],37:[2,52]},{5:[2,55],19:[2,55],22:[2,55],24:[2,55],28:[2,55],30:[2,55],32:[2,55],33:[2,55],34:[2,55],36:[2,55],37:[2,55]},{5:[2,54],19:[2,54],22:[2,54],24:[2,54],28:[2,54],30:[2,54],32:[2,54],33:[2,54],34:[2,54],36:[2,54],37:[2,54]},{6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],36:[1,110],37:[1,13]},{4:111,6:3,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],37:[1,13]},{5:[2,56],19:[2,56],22:[2,56],24:[2,56],28:[2,56],30:[2,56],32:[2,56],33:[2,56],34:[2,56],36:[2,56],37:[2,56]},{6:15,19:[1,6],21:4,22:[1,10],24:[1,5],25:7,26:8,27:9,28:[1,11],34:[1,12],36:[1,112],37:[1,13]},{5:[2,57],19:[2,57],22:[2,57],24:[2,57],28:[2,57],30:[2,57],32:[2,57],33:[2,57],34:[2,57],36:[2,57],37:[2,57]}],
    defaultActions: {14:[2,1]},
    parseError: function parseError(str, hash) {
        if (hash.recoverable) {
            this.trace(str);
        } else {
            throw new Error(str);
        }
    },
    parse: function parse(input) {
        var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
        var args = lstack.slice.call(arguments, 1);
        this.lexer.setInput(input);
        this.lexer.yy = this.yy;
        this.yy.lexer = this.lexer;
        this.yy.parser = this;
        if (typeof this.lexer.yylloc == 'undefined') {
            this.lexer.yylloc = {};
        }
        var yyloc = this.lexer.yylloc;
        lstack.push(yyloc);
        var ranges = this.lexer.options && this.lexer.options.ranges;
        if (typeof this.yy.parseError === 'function') {
            this.parseError = this.yy.parseError;
        } else {
            this.parseError = Object.getPrototypeOf(this).parseError;
        }
        function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
        }
        function lex() {
            var token;
            token = self.lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
        var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
        while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol == 'undefined') {
                    symbol = lex();
                }
                action = table[state] && table[state][symbol];
            }
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
            if (action[0] instanceof Array && action.length > 1) {
                throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
            }
            switch (action[0]) {
                case 1:
                    stack.push(symbol);
                    vstack.push(this.lexer.yytext);
                    lstack.push(this.lexer.yylloc);
                    stack.push(action[1]);
                    symbol = null;
                    if (!preErrorSymbol) {
                        yyleng = this.lexer.yyleng;
                        yytext = this.lexer.yytext;
                        yylineno = this.lexer.yylineno;
                        yyloc = this.lexer.yylloc;
                        if (recovering > 0) {
                            recovering--;
                        }
                    } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                    }
                    break;
                case 2:
                    len = this.productions_[action[1]][1];
                    yyval.$ = vstack[vstack.length - len];
                    yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                    };
                    if (ranges) {
                        yyval._$.range = [
                            lstack[lstack.length - (len || 1)].range[0],
                            lstack[lstack.length - 1].range[1]
                                ];
                    }
                    r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                            ].concat(args));
                    if (typeof r !== 'undefined') {
                        return r;
                    }
                    if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                    }
                    stack.push(this.productions_[action[1]][0]);
                    vstack.push(yyval.$);
                    lstack.push(yyval._$);
                    newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                    stack.push(newState);
                    break;
                case 3:
                    return true;
            }
        }
        return true;
    }};
    /* generated by jison-lex 0.2.1 */
    var lexer = (function(){
        var lexer = {

            EOF:1,

        parseError:function parseError(str, hash) {
            if (this.yy.parser) {
                this.yy.parser.parseError(str, hash);
            } else {
                throw new Error(str);
            }
        },

        // resets the lexer, sets new input
        setInput:function (input) {
            this._input = input;
            this._more = this._backtrack = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = '';
            this.conditionStack = ['INITIAL'];
            this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0
            };
            if (this.options.ranges) {
                this.yylloc.range = [0,0];
            }
            this.offset = 0;
            return this;
        },

        // consumes and returns one char from the input
        input:function () {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
            } else {
                this.yylloc.last_column++;
            }
            if (this.options.ranges) {
                this.yylloc.range[1]++;
            }

            this._input = this._input.slice(1);
            return ch;
        },

        // unshifts one char (or a string) into the input
        unput:function (ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);

            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
            //this.yyleng -= len;
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);

            if (lines.length - 1) {
                this.yylineno -= lines.length - 1;
            }
            var r = this.yylloc.range;

            this.yylloc = {
                first_line: this.yylloc.first_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.first_column,
                last_column: lines ?
                    (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                    + oldLines[oldLines.length - lines.length].length - lines[0].length :
                    this.yylloc.first_column - len
            };

            if (this.options.ranges) {
                this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            this.yyleng = this.yytext.length;
            return this;
        },

        // When called from action, caches matched text and appends it on next action
        more:function () {
            this._more = true;
            return this;
        },

        // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
        reject:function () {
            if (this.options.backtrack_lexer) {
                this._backtrack = true;
            } else {
                return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                    text: "",
                    token: null,
                    line: this.yylineno
                });

            }
            return this;
        },

        // retain first n characters of the match
        less:function (n) {
            this.unput(this.match.slice(n));
        },

        // displays already matched input, i.e. for error messages
        pastInput:function () {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
        },

        // displays upcoming input, i.e. for error messages
        upcomingInput:function () {
            var next = this.match;
            if (next.length < 20) {
                next += this._input.substr(0, 20-next.length);
            }
            return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
        },

        // displays the character position where the lexing error occurred, i.e. for error messages
        showPosition:function () {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
        },

        // test the lexed token: return FALSE when not a match, otherwise return token
        test_match:function (match, indexed_rule) {
            var token,
            lines,
            backup;

            if (this.options.backtrack_lexer) {
                // save context
                backup = {
                    yylineno: this.yylineno,
                    yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                    },
                    yytext: this.yytext,
                    match: this.match,
                    matches: this.matches,
                    matched: this.matched,
                    yyleng: this.yyleng,
                    offset: this.offset,
                    _more: this._more,
                    _input: this._input,
                    yy: this.yy,
                    conditionStack: this.conditionStack.slice(0),
                    done: this.done
                };
                if (this.options.ranges) {
                    backup.yylloc.range = this.yylloc.range.slice(0);
                }
            }

            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) {
                this.yylineno += lines.length;
            }
            this.yylloc = {
                first_line: this.yylloc.last_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.last_column,
                last_column: lines ?
                    lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                    this.yylloc.last_column + match[0].length
            };
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            if (this.done && this._input) {
                this.done = false;
            }
            if (token) {
                return token;
            } else if (this._backtrack) {
                // recover context
                for (var k in backup) {
                    this[k] = backup[k];
                }
                return false; // rule action called reject() implying the next rule should be tested instead.
            }
            return false;
        },

        // return next match in input
        next:function () {
            if (this.done) {
                return this.EOF;
            }
            if (!this._input) {
                this.done = true;
            }

            var token,
                match,
                tempMatch,
                index;
            if (!this._more) {
                this.yytext = '';
                this.match = '';
            }
            var rules = this._currentRules();
            for (var i = 0; i < rules.length; i++) {
                tempMatch = this._input.match(this.rules[rules[i]]);
                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                    match = tempMatch;
                    index = i;
                    if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);
                        if (token !== false) {
                            return token;
                        } else if (this._backtrack) {
                            match = false;
                            continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                            return false;
                        }
                    } else if (!this.options.flex) {
                        break;
                    }
                }
            }
            if (match) {
                token = this.test_match(match, rules[index]);
                if (token !== false) {
                    return token;
                }
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
            }
            if (this._input === "") {
                return this.EOF;
            } else {
                return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                    text: "",
                    token: null,
                    line: this.yylineno
                });
            }
        },

        // return next match that has a token
        lex:function lex() {
            var r = this.next();
            if (r) {
                return r;
            } else {
                return this.lex();
            }
        },

        // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
        begin:function begin(condition) {
            this.conditionStack.push(condition);
        },

        // pop the previously active lexer condition state off the condition stack
        popState:function popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
                return this.conditionStack.pop();
            } else {
                return this.conditionStack[0];
            }
        },

        // produce the lexer rule set which is active for the currently active lexer condition state
        _currentRules:function _currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            } else {
                return this.conditions["INITIAL"].rules;
            }
        },

        // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
        topState:function topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) {
                return this.conditionStack[n];
            } else {
                return "INITIAL";
            }
        },

        // alias for begin(condition)
        pushState:function pushState(condition) {
            this.begin(condition);
        },

        // return the number of states currently on the stack
        stateStackSize:function stateStackSize() {
            return this.conditionStack.length;
        },
        options: {},
        performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

            var YYSTATE=YY_START;
            switch($avoiding_name_collisions) {
                case 0:
                    this.begin('interpolation');
                    return 22;

                    break;
                case 1:
                    this.popState();
                    return 23;

                    break;
                case 2:return 35
                       break;
                case 3:return 18
                       break;
                case 4:return 20
                       break;
                case 5:
                       return 9;

                       break;
                case 6:return 12
                       break;
                case 7:return 15
                       break;
                case 8:return 14
                       break;
                case 9:return 11
                       break;
                case 10:return '!'
                        break;
                case 11:return 16
                        break;
                case 12:return 17
                        break;
                case 13:return 8
                        break;
                case 14:return 13
                        break;
                case 15:return 38
                        break;
                case 16:
                        this.begin('if_drt');
                        return 28;

                        break;
                case 17:
                        return 30;

                        break;
                case 18:
                        this.begin('list_drt');
                        return 34;

                        break;
                case 19:
                        return 36;

                        break;
                case 20:
                        this.popState();
                        return 29;

                        break;
                case 21:
                        this.begin('if_drt');
                        return 32;

                        break;
                case 22:
                        this.begin('if_drt');
                        return 33;

                        break;
                case 23:
                        this.begin('assign_drt');
                        return 37;

                        break;
                case 24:return ''
                        break;
                case 25:return 19
                        break;
                case 26:return 24
                        break;
                case 27:return 5
                        break;
            }
        },
        rules: [/^(?:\$\{)/,/^(?:\})/,/^(?:as\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^"\n]*["\n]|'[^'\n]*['\n])/,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:==)/,/^(?:=)/,/^(?:<#if\b)/,/^(?:<\/#if>)/,/^(?:<#list\b)/,/^(?:<\/#list>)/,/^(?:>)/,/^(?:<#elseif\b)/,/^(?:<#else\b)/,/^(?:<#assign\b)/,/^(?:[ \t]+)/,/^(?:[ \t]+)/,/^(?:(.|\n))/,/^(?:$)/],
        conditions: {"if_drt":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,25,26,27],"inclusive":true},"list_drt":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,25,26,27],"inclusive":true},"assign_drt":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27],"inclusive":true},"interpolation":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,21,22,23,24,25,26,27],"inclusive":true},"INITIAL":{"rules":[0,1,2,16,17,18,19,21,22,23,25,26,27],"inclusive":true}}
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();
/* jshint ignore:end */
