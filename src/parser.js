/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jerrymarker = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,10],$V2=[1,5],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[5,26,31,33,37,39,41,42,43,45,47],$V7=[1,24],$V8=[1,18],$V9=[1,17],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[11,12,13,14,15,16,17,18,19,20,21,22,23,25,32,38],$Vs=[1,53],$Vt=[8,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,32,38,46,48],$Vu=[11,14,15,16,18,19,20,21,22,23,25,32,38],$Vv=[14,15,18,19,20,21,22,23,25,32,38],$Vw=[22,23,25,32,38],$Vx=[1,86],$Vy=[1,87];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"html":3,"contents":4,"EOF":5,"content":6,"OBJECT":7,"DOT":8,"IDENTIFIER":9,"e":10,"+":11,"*":12,"%":13,"==":14,"!=":15,"-":16,"/":17,"<":18,">":19,">=":20,"<=":21,"||":22,"&&":23,"(":24,")":25,"INDENT":26,"!":27,"NUMBER":28,"STRING":29,"INTERPOLATIONS":30,"${":31,"}":32,"CHAR":33,"IFDIRECTIVE":34,"LISTDIRECTIVE":35,"ASSIGNDIRECTIVE":36,"DIRECTIVE_IF_START_TAG":37,"DIRECTIVE_END":38,"DIRECTIVE_IF_END_TAG":39,"ELSEIF":40,"DIRECTIVE_ELSEIF_START_TAG":41,"DIRECTIVE_ELSE_START_TAG":42,"DIRECTIVE_LIST_START_TAG":43,"AS":44,"DIRECTIVE_LIST_END_TAG":45,"..":46,"DIRECTIVE_ASSIGN_START_TAG":47,"=":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"DOT",9:"IDENTIFIER",11:"+",12:"*",13:"%",14:"==",15:"!=",16:"-",17:"/",18:"<",19:">",20:">=",21:"<=",22:"||",23:"&&",24:"(",25:")",26:"INDENT",27:"!",28:"NUMBER",29:"STRING",31:"${",32:"}",33:"CHAR",37:"DIRECTIVE_IF_START_TAG",38:"DIRECTIVE_END",39:"DIRECTIVE_IF_END_TAG",41:"DIRECTIVE_ELSEIF_START_TAG",42:"DIRECTIVE_ELSE_START_TAG",43:"DIRECTIVE_LIST_START_TAG",44:"AS",45:"DIRECTIVE_LIST_END_TAG",46:"..",47:"DIRECTIVE_ASSIGN_START_TAG",48:"="},
productions_: [0,[3,2],[4,1],[4,2],[7,3],[7,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,2],[10,3],[10,1],[10,2],[10,2],[10,3],[10,1],[10,2],[10,3],[10,2],[10,1],[10,2],[10,2],[10,3],[30,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[34,5],[34,5],[40,5],[40,4],[40,5],[40,5],[35,10],[35,11],[35,12],[35,12],[35,12],[35,12],[36,6],[36,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     var root = $$[$0-1];
     this.$ = root;
     return this.$;
   
break;
case 2:

        var n = new yy.ast.ContentNode();
        n.v.push($$[$0]);
        this.$ = n;
   
break;
case 3:

        var n = new yy.ast.ContentNode();
        n.v.push($$[$0]);

        $$[$0-1].v.push(n);
        this.$ = $$[$0-1];
   
break;
case 4:

        this.$ = new yy.ast.ObjectNode('.', $$[$0-2], $$[$0]);
    
break;
case 5: case 32: case 34:

        this.$ = new yy.ast.ObjectNode('value', $$[$0]);
    
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:

        this.$ = new yy.ast.ExpressionNode($$[$0-1], $$[$0-2], $$[$0]);
    
break;
case 19:

        this.$ = new yy.ast.ExpressionNode('eval', $$[$0-1]);
    
break;
case 20: case 21:

        this.$ = new yy.ast.ExpressionNode('uminus', $$[$0]);
    
break;
case 22: case 23:

        this.$ = new yy.ast.ExpressionNode('unot', $$[$0]);
    
break;
case 24:

        this.$ = new yy.ast.ObjectNode('literalvalue', Number(yytext));
    
break;
case 25:

        this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0]));
    
break;
case 26: case 27:

        this.$ = new yy.ast.ObjectNode('literalvalue', Number($$[$0-1]));
    
break;
case 28:

        //"hello"->hello
        this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0].slice(1,-1));
    
break;
case 29:

        this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0].slice(1,-1));
    
break;
case 30: case 31:

        this.$ = new yy.ast.ObjectNode('literalvalue', $$[$0-1].slice(1,-1));
    
break;
case 33: case 35:

        this.$ = new yy.ast.ObjectNode('value', $$[$0-1]);
    
break;
case 36:

        this.$ = $$[$0-1];
    
break;
case 37:

        this.$ = new yy.ast.InterPolationNode($$[$0]);
    
break;
case 38: case 39:

        this.$ = new yy.ast.LiteralNode($$[$0]);
    
break;
case 43: case 48:

        var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], null);
        this.$ = nd;
    
break;
case 44: case 45:

        var nd = new yy.ast.IFNode($$[$0-3], $$[$0-1], $$[$0]);
        this.$ = nd;
    
break;
case 46: case 47:

        var trueCondition = new yy.ast.ObjectNode('literalvalue', true);
        var nd = new yy.ast.IFNode(trueCondition, $$[$0-1], null);
        this.$ = nd;
    
break;
case 49:

        this.$ = new yy.ast.ListNode($$[$0-7], $$[$0-3], $$[$0-1]);
    
break;
case 50:

        this.$ = new yy.ast.ListNode($$[$0-8], $$[$0-4], $$[$0-1]);
    
break;
case 51:

        this.$ = new yy.ast.ListNode([$$[$0-9], $$[$0-7]], $$[$0-3], $$[$0-1], true);
    
break;
case 52:

        var end = new yy.ast.ObjectNode('literalvalue', Number($$[$0-7]));
        this.$ = new yy.ast.ListNode([$$[$0-9], end], $$[$0-3], $$[$0-1], true);
    
break;
case 53:

        var start = new yy.ast.ObjectNode('literalvalue', Number($$[$0-9]));
        this.$ = new yy.ast.ListNode([start, $$[$0-7]], $$[$0-3], $$[$0-1], true);
    
break;
case 54:

        var start = new yy.ast.ObjectNode('literalvalue', Number($$[$0-9]));
        var end = new yy.ast.ObjectNode('literalvalue', Number($$[$0-7]));

        this.$ = new yy.ast.ListNode([start, end], $$[$0-3], $$[$0-1], true);
    
break;
case 55:

        var lv = new yy.ast.ObjectNode('value', $$[$0-3]);
        this.$ = new yy.ast.StatementNode('assign', lv, $$[$0-1]);
    
break;
case 56:

        var lv = new yy.ast.ObjectNode('value', $$[$0-4]);
        this.$ = new yy.ast.StatementNode('assign', lv, $$[$0-1]);
    
break;
}
},
table: [{3:1,4:2,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{1:[3]},{5:[1,14],6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},o($V6,[2,2]),o($V6,[2,37]),o($V6,[2,38]),o($V6,[2,39]),o($V6,[2,40]),o($V6,[2,41]),o($V6,[2,42]),{7:23,9:$V7,10:16,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:25,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{26:[1,26]},{26:[1,27]},{1:[2,1]},o($V6,[2,3]),{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,32:[1,28]},{7:23,9:$V7,10:42,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:43,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:48,9:$V7,16:[1,44],27:[1,45],28:[1,46],29:[1,47]},{7:23,9:$V7,10:49,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},o($Vr,[2,24],{26:[1,50]}),o($Vr,[2,28],{26:[1,51]}),o($Vr,[2,32],{8:$Vs,26:[1,52]}),o($Vt,[2,5]),{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,38:[1,54]},{7:55,9:$V7,28:[1,56]},{7:57,9:$V7},o($V6,[2,36]),{7:23,9:$V7,10:58,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:59,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:60,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:61,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:62,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:63,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:64,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:65,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:66,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:67,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:68,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:69,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:70,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,25:[1,71]},o($Vr,[2,20]),{7:23,9:$V7,10:72,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{7:23,9:$V7,10:73,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},o($Vr,[2,25],{26:[1,74]}),o($Vr,[2,29],{26:[1,75]}),o($Vr,[2,34],{8:$Vs,26:[1,76]}),o($Vr,[2,22]),o($Vr,[2,26]),o($Vr,[2,31]),o($Vr,[2,33]),{9:[1,77]},{4:78,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{8:$Vs,26:[1,79],46:[1,80]},{46:[1,81]},{8:$Vs,26:[1,83],48:[1,82]},o($Vu,[2,6],{12:$Vf,13:$Vg,17:$Vk}),o($Vr,[2,7]),o([11,13,14,15,16,18,19,20,21,22,23,25,32,38],[2,8],{12:$Vf,17:$Vk}),o($Vv,[2,9],{11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk}),o($Vv,[2,10],{11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk}),o($Vu,[2,11],{12:$Vf,13:$Vg,17:$Vk}),o($Vr,[2,12]),o($Vv,[2,13],{11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk}),o($Vv,[2,14],{11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk}),o($Vv,[2,15],{11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk}),o($Vv,[2,16],{11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk}),o($Vw,[2,17],{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo}),o($Vw,[2,18],{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo}),o($Vr,[2,19]),o($Vr,[2,21]),o($Vr,[2,23]),o($Vr,[2,27]),o($Vr,[2,30]),o($Vr,[2,35]),o($Vt,[2,4]),{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,39:[1,84],40:85,41:$Vx,42:$Vy,43:$V4,47:$V5},{44:[1,88]},{7:89,9:$V7,28:[1,90]},{7:91,9:$V7,28:[1,92]},{7:23,9:$V7,10:93,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{48:[1,94]},o($V6,[2,43]),o($V6,[2,44]),{7:23,9:$V7,10:95,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{26:[1,97],38:[1,96]},{26:[1,98]},{8:$Vs,26:[1,99]},{26:[1,100]},{8:$Vs,26:[1,101]},{26:[1,102]},{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,38:[1,103]},{7:23,9:$V7,10:104,16:$V8,24:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd},{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,38:[1,105]},{4:106,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{38:[1,107]},{7:108,9:$V7},{44:[1,109]},{44:[1,110]},{44:[1,111]},{44:[1,112]},o($V6,[2,55]),{11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,38:[1,113]},{4:114,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,39:[1,115],43:$V4,47:$V5},{4:116,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{8:$Vs,26:[1,118],38:[1,117]},{26:[1,119]},{26:[1,120]},{26:[1,121]},{26:[1,122]},o($V6,[2,56]),{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,39:[1,124],40:123,41:$Vx,42:$Vy,43:$V4,47:$V5},o($V6,[2,46]),{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,39:[1,125],43:$V4,47:$V5},{4:126,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{38:[1,127]},{7:128,9:$V7},{7:129,9:$V7},{7:130,9:$V7},{7:131,9:$V7},o($V6,[2,45]),o($V6,[2,48]),o($V6,[2,47]),{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,45:[1,132],47:$V5},{4:133,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{8:$Vs,38:[1,134]},{8:$Vs,38:[1,135]},{8:$Vs,38:[1,136]},{8:$Vs,38:[1,137]},o($V6,[2,49]),{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,45:[1,138],47:$V5},{4:139,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{4:140,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{4:141,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},{4:142,6:3,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,47:$V5},o($V6,[2,50]),{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,45:[1,143],47:$V5},{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,45:[1,144],47:$V5},{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,45:[1,145],47:$V5},{6:15,26:$V0,30:4,31:$V1,33:$V2,34:7,35:8,36:9,37:$V3,43:$V4,45:[1,146],47:$V5},o($V6,[2,51]),o($V6,[2,52]),o($V6,[2,53]),o($V6,[2,54])],
defaultActions: {14:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                        this.begin('interpolation');
                                        return 31;
                                    
break;
case 1:
                                        this.popState();
                                        return 32;
                                    
break;
case 2:return 44
break;
case 3:return 28
break;
case 4:return 29
break;
case 5:
                                                                                    return 9;
                                                                                
break;
case 6:return 46
break;
case 7:return 12
break;
case 8:return 17
break;
case 9:return 13
break;
case 10:return 16
break;
case 11:return 11
break;
case 12:
                                                                                    return 22;
                                                                                
break;
case 13:
                                                                                    return 23;
                                                                                
break;
case 14:return 21
break;
case 15:return 20
break;
case 16:return 18
break;
case 17:
                                                                                    this.begin('exp');
                                                                                    return 24;
                                                                                
break;
case 18:return 19
break;
case 19:
                                                                                    this.popState();
                                                                                    return 25;
                                                                                
break;
case 20:return 8
break;
case 21:return 14
break;
case 22:return 15
break;
case 23:return 48
break;
case 24:return 27
break;
case 25:
                                        this.begin('if_drt');
                                        return 37;
                                    
break;
case 26:
                                        return 39;
                                    
break;
case 27:
                                        this.begin('list_drt');
                                        return 43;
                                    
break;
case 28:
                                        return 45;
                                    
break;
case 29:
                                            this.popState();
                                            return 38;
                                        
break;
case 30:
                                        this.begin('if_drt');
                                        return 41;
                                    
break;
case 31:
                                        this.begin('if_drt');
                                        return 42;
                                    
break;
case 32:
                                        this.begin('assign_drt');
                                        return 47;
                                    
break;
case 33:return ''
break;
case 34:return 26
break;
case 35:return 33
break;
case 36:return 5
break;
}
},
rules: [/^(?:\$\{)/,/^(?:\})/,/^(?:as\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^"\n]*["\n]|'[^'\n]*['\n])/,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/,/^(?:\.\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:[ \t]*\()/,/^(?:>)/,/^(?:\)[ \t]*)/,/^(?:\.)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:!)/,/^(?:<#if\b)/,/^(?:<\/#if>)/,/^(?:<#list\b)/,/^(?:<\/#list>)/,/^(?:[ \t]*>)/,/^(?:<#elseif\b)/,/^(?:<#else\b)/,/^(?:<#assign\b)/,/^(?:[ \t]+)/,/^(?:[ \t]+)/,/^(?:(.|\n))/,/^(?:$)/],
conditions: {"if_drt":{"rules":[0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,28,29,30,31,32,34,35,36],"inclusive":true},"list_drt":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,28,29,30,31,32,34,35,36],"inclusive":true},"assign_drt":{"rules":[0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36],"inclusive":true},"interpolation":{"rules":[0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,28,30,31,32,33,34,35,36],"inclusive":true},"exp":{"rules":[0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,30,31,32,34,35,36],"inclusive":true},"logic_op":{"rules":[0,1,2,25,26,27,28,30,31,32,34,35,36],"inclusive":true},"INITIAL":{"rules":[0,1,2,25,26,27,28,30,31,32,34,35,36],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
